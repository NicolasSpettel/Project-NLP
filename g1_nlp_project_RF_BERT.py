# -*- coding: utf-8 -*-
"""g1_nlp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iOferuPOs16-wHZwM3uaWkXL69_VmZUJ

NLP Project: John-Baptist, Nico and Lovely

1. Install sentence-transformers
"""

!pip install sentence-transformers

"""2. Import libraries"""

import pandas as pd
import numpy as np
from sklearn.model_selection import TimeSeriesSplit
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, roc_curve, auc, confusion_matrix
import matplotlib.pyplot as plt
from sentence_transformers import SentenceTransformer
from sklearn.feature_extraction.text import TfidfVectorizer
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, classification_report, roc_auc_score, roc_curve, confusion_matrix, ConfusionMatrixDisplay
from sklearn.model_selection import train_test_split

3. Mount drive and read data

from google.colab import drive
drive.mount('/content/drive')

train = pd.read_csv("/content/drive/MyDrive/train_data_cleaned.csv")
test  = pd.read_csv("/content/drive/MyDrive/validation_data_cleaned.csv")

"""4. Combine title + text"""

train["combined"] = train["title"].fillna('') + " " + train["text"].fillna('')
test["combined"]  = test["title"].fillna('') + " " + test["text"].fillna('')

"""5. TF-IDF Vectorization"""

tfidf = TfidfVectorizer(max_features=5000)
X_tfidf_train = tfidf.fit_transform(train["combined"])
X_tfidf_test  = tfidf.transform(test["combined"])

"""6. Bert Embeddings"""

BERT_MODEL = "all-MiniLM-L6-v2"
embedder = SentenceTransformer(BERT_MODEL)

def embed_texts(texts, batch_size=64):
    return embedder.encode(
        list(texts), batch_size=batch_size,
        show_progress_bar=True, convert_to_numpy=True, normalize_embeddings=True
    )

X_bert_train = embed_texts(train["combined"])
X_bert_test  = embed_texts(test["combined"])

"""7. Concatenate TF-IDF + BERT




"""

X_train = np.hstack([X_tfidf_train.toarray(), X_bert_train])
X_test  = np.hstack([X_tfidf_test.toarray(), X_bert_test])

"""8. Labels"""

print(X_tr.shape, X_val.shape)
print(y_tr.shape, y_val.shape)
print(np.isnan(X_tr).sum(), np.isnan(y_tr).sum())

y_train = train["label"].values  # adjust if label column name is different

"""9. Train/Test Split"""

X_tr, X_val, y_tr, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42, stratify=y_train)

"""Training features: (32319, 5384)

Validation features: (8080, 5384)

Training labels: (32319,)

Validation labels: (8080,)

10. Random Forest with tuned hyperparameters
"""

clf = RandomForestClassifier(
    n_estimators=500,   # more trees for stability
    max_depth=None,     # allow full growth
    min_samples_leaf=2, # avoid tiny leaves
    max_features='sqrt',# sqrt(num_features) at each split
    random_state=42,
    n_jobs=-1
)

"""11. Fit the Classifier"""

clf.fit(X_tr, y_tr)   # <-- put it here

"""12. Predictions"""

y_val_pred = clf.predict(X_val)

"""13. If binary classification, get probability for ROC"""

if len(np.unique(y_train)) == 2:
    y_val_prob = clf.predict_proba(X_val)[:,1]
else:
    y_val_prob = None

"""14. Evaluation"""

print("Accuracy:", accuracy_score(y_val, y_val_pred))
print("\nClassification Report:\n", classification_report(y_val, y_val_pred))

"""15. Visualization: ROC and Confusion Matrix"""

def plot_roc_confusion(y_true, y_pred, y_prob=None, title_suffix=""):
    # ROC Curve for binary classification
    if y_prob is not None:
        fpr, tpr, _ = roc_curve(y_true, y_prob)
        auc = roc_auc_score(y_true, y_prob)
        plt.figure(figsize=(6,5))
        plt.plot(fpr, tpr, label=f"AUC = {auc:.3f}")
        plt.plot([0,1],[0,1],'k--')
        plt.xlabel("False Positive Rate")
        plt.ylabel("True Positive Rate")
        plt.title(f"ROC Curve {title_suffix}")
        plt.legend()
        plt.show()

         cm = confusion_matrix(y_true, y_pred)
    disp = ConfusionMatrixDisplay(confusion_matrix=cm)
    disp.plot(cmap=plt.cm.Blues)
    plt.title(f"Confusion Matrix {title_suffix}")
    plt.show()

plot_roc_confusion(y_val, y_val_pred, y_val_prob, title_suffix="(Validation Set)")

# ---------- Predict on test set ----------
y_test_pred = clf.predict(X_test)

# ---------- Save predictions ----------
output = pd.DataFrame({"prediction": y_test_pred})
output.to_csv("/content/drive/MyDrive/test_predictions.csv", index=False)
print("Test predictions saved to 'test_predictions.csv'")